##
#
# This file contains parameters defining the punyo hug optimization problem,
# where a squishy humanoid robot is tasked with picking up a large object by
# hugging it.
#
##

# Initial state
q_init : [-0.1,                     # height
          0.0, 0.0, 0.0,            # torso
          1.0, 0.1, 0.5, 0.0, 0.0,  # right arm
          1.0, 0.1, 0.5, 0.0, 0.0,  # left arm
          0.0, 0.0, 0.0,            # ball orientation
          0.0, 0.3, 0.3]            # ball position
v_init : [0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0]

# Target state
q_nom_start : [0.0,
               0.0, 0.0, 0.0,
               1.0, 0.1, 0.5, 0.0, 0.0,
               1.0, 0.1, 0.5, 0.0, 0.0,
               0.0, 0.0, 0.0,
               0.0, 0.3, 0.3]
q_nom_end : [0.0,
             0.0, 0.0, 0.0,
             1.0, 0.1, 0.5, 0.0, 0.0,
             1.0, 0.1, 0.5, 0.0, 0.0,
             0.0, 0.0, 0.0,
             0.2, 0.3, 1.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [-0.1,            # matching q_init
           0.0, 0.0, 0.0,
           1.0, 0.1, 0.5, 0.0, 0.0,
           1.0, 0.1, 0.5, 0.0, 0.0,
           0.0, 0.0, 0.0,
           0.0, 0.3, 0.3]
#q_guess : [0.0,             # matching q_nom_end
#           0.0, 0.0, 0.0,
#           1.0, 0.1, 0.5, 0.0, 0.0,
#           1.0, 0.1, 0.5, 0.0, 0.0,
#           1.0, 0.0, 0.0, 0.0,
#           0.2, 0.3, 1.0]

# Cost Weights
Qq : [10, 
      0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0,
      1, 1, 1,
      100, 1, 100]
Qv : [100, 
      1, 1, 1, 
      1, 1, 1, 1, 1, 
      1, 1, 1, 1, 1,
      1, 1, 1,
      1, 1, 1]
R : [1e-4, 
     1e-2, 1e-2, 1e-2, 
     1e-2, 1e-2, 1e-2, 1e-2, 1e-2, 
     1e-2, 1e-2, 1e-2, 1e-2, 1e-2,
     1e1, 1e1, 1e1,
     1e1, 1e1, 1e1]

Qfq : [10, 
       0, 0, 0, 
       0, 0, 0, 0, 0, 
       0, 0, 0, 0, 0, 
       1, 1, 1,
       100, 100, 100]
Qfv : [10, 
       1, 1, 1, 
       1, 1, 1, 1, 1, 
       1, 1, 1, 1, 1,
       1, 1, 1,
       1, 1, 1]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 500             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
scaling : true
equality_constraints : true

floating_joint_type : "space_xyz_floating"
normalize_quaternions : false

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
# With no force at a distance, the normal component of contact force increases
# quadratically from 0 Newtons at 0 meters penetration to F Newtons at delta
# meters of penetration. After this point, force increases linearly at a rate
# of 2F/delta Newtons / meter. 
F : 1.0       # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# With force at a distance, contact normal forces increases linearly at a rate
# of 2F/delta Newtons / meter, with a given smoothing factor (higher is smoother)
smoothing_factor : 1.0
force_at_a_distance : true

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.1      # Regularization velocity, in m/s.
