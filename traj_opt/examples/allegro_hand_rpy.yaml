##
#
# This file contains parameters defining an optimization problem where an
# allegro hand is tasked with rotating a ball in its hand. 
#
##

# Initial state
q_init : [-0.1, 1.0, 1.0, 1.0,   # outside finger
          0.6, 1.9, 1.0, 1.0,   # thumb
          0.0, 0.7, 1.0, 1.0,   # middle finger
          0.1, 1.0, 1.0, 1.0,   # inside finger
          1.0, 0.0, 0.0, 0.0,   # ball orientation
         -0.06, 0.0, 0.1]        # ball position

v_init : [0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0]

# Target state
q_nom_start : [-0.1, 1.0, 1.0, 1.0,
                0.6, 1.9, 1.0, 1.0,
                0.0, 0.7, 1.0, 1.0,
                0.1, 1.0, 1.0, 1.0,
                1.0, 0.0, 0.0, 0.0,
               -0.06, 0.0, 0.1]
q_nom_end : [-0.1, 1.0, 1.0, 1.0,
              0.6, 1.9, 1.0, 1.0,
              0.0, 0.7, 1.0, 1.0,
              0.1, 1.0, 1.0, 1.0,
              0.7, 0.0, 0.0, 0.7,
             -0.06, 0.0, 0.1]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [-0.1, 1.0, 1.0, 1.0,
            0.6, 1.9, 1.0, 1.0,
            0.0, 0.7, 1.0, 1.0,
            0.1, 1.0, 1.0, 1.0,
            0.7, 0.0, 0.0, 0.0,
           -0.06, 0.0, 0.1]

# Cost Weights
Qq : [0e0, 0e0, 0e0, 0e0,
      0e0, 0e0, 0e0, 0e0,
      0e0, 0e0, 0e0, 0e0,
      0e0, 0e0, 0e0, 0e0,
      1e1, 1e1, 1e1, 1e1,
      1e1, 1e1, 1e1]
Qv : [1e0, 1e0, 1e0, 1e0,
      1e0, 1e0, 1e0, 1e0,
      1e0, 1e0, 1e0, 1e0,
      1e0, 1e0, 1e0, 1e0,
      1e0, 1e0, 1e0,
      1e0, 1e0, 1e0]
R : [1e-2, 1e-2, 1e-2, 1e-2,
     1e-2, 1e-2, 1e-2, 1e-2,
     1e-2, 1e-2, 1e-2, 1e-2,
     1e-2, 1e-2, 1e-2, 1e-2,
     1e3, 1e3, 1e3,
     1e3, 1e3, 1e3]

Qfq : [0e0, 0e0, 0e0, 0e0,
       0e0, 0e0, 0e0, 0e0,
       0e0, 0e0, 0e0, 0e0,
       0e0, 0e0, 0e0, 0e0,
       1e2, 1e2, 1e2, 1e2,
       1e2, 1e2, 1e2]
Qfv : [1e0, 1e0, 1e0, 1e0,
       1e0, 1e0, 1e0, 1e0,
       1e0, 1e0, 1e0, 1e0,
       1e0, 1e0, 1e0, 1e0,
       1e0, 1e0, 1e0,
       1e0, 1e0, 1e0]


# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 50              # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0
scaling : true
equality_constraints : true

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
# With no force at a distance, the normal component of contact force increases
# quadratically from 0 Newtons at 0 meters penetration to F Newtons at delta
# meters of penetration. After this point, force increases linearly at a rate
# of 2F/delta Newtons / meter. 
F : 1.0       # force at delta meters of penetration
delta : 0.02  # penetration distance with F newtons of normal force
dissipation_velocity : 0.01  # Hunt & Crossley-like model parameter, in m/s.

# With force at a distance, contact normal forces increases linearly at a rate
# of 2F/delta Newtons / meter, with a given smoothing factor (higher is smoother)
smoothing_factor : 0.1
force_at_a_distance : true

# Friction
friction_coefficient : 1.0  # Coefficient of friction.
stiction_velocity: 0.03     # Regularization velocity, in m/s.