##
#
# This file contains parameters for the acrobot swingup problem.
#
##

# Initial state ([shoulder, elbow])
q_init : [0.0, 0.0]
v_init : [0.0, 0.0]

# Target state
q_nom_start : [3.1415, 0.0]
q_nom_end : [3.1415, 0.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [3.1415, 0.0]

# Cost Weights. These define diagonal matrices, again with the ordering
# [finger 1, finger 2, spinner]
Qq : [1.0, 1.0]  # Running cost
Qv : [1.0, 1.0]
R : [1e3, 0.1]

Qfq : [100, 100]  # Terminal cost
Qfv : [1.0, 1.0]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 40    # number of timesteps

# Solver parameters
max_iters : 200             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
linesearch : "armijo"       # linesearch strategy, {armino, backtracking}
proximal_operator : false   # whether to add a proximal operator cost term
rho_proximal : 1e-8         # the proximal cost multiplier
scaling: false
exact_hessian : false

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "central_differences"

linear_solver: "pentadiagonal_lu"
#linear_solver: "dense_ldlt"
#linear_solver: "petsc"

petsc_rel_tolerance: 1.0e-4

# {cg, direct, minres}
petsc_solver: cg

# none, chol, ichol
petsc_preconditioner: chol

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
verbose : true
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# MPC parameters
mpc : true
mpc_iters : 10
controller_frequency : 30
sim_time : 10
sim_time_step : 1e-3
sim_realtime_rate : 1.0
Kp : [0.0, 20.0]
Kd : [0.0, 1.0]
Vmax : 100
lqr : true        # use LQR instead of PD+